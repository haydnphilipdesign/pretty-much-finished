import nodemailer from 'nodemailer';
import fs from 'fs/promises';
import path from 'path';

interface EmailAttachment {
  filename: string;
  path: string;
  contentType?: string;
}

/**
 * Helper to get environment variables from either source
 */
const getEnvVar = (name: string, defaultValue: string = ''): string => {
  // Try process.env first (direct Node.js environment)
  if (process.env[name]) {
    return process.env[name] || defaultValue;
  }
  
  // Then try import.meta.env (Vite environment)
  if (typeof import.meta !== 'undefined' && import.meta.env) {
    return import.meta.env[name] || defaultValue;
  }
  
  // Try with NEXT_PUBLIC prefix
  if (process.env[`NEXT_PUBLIC_${name}`]) {
    return process.env[`NEXT_PUBLIC_${name}`] || defaultValue;
  }
  
  // Try with VITE prefix
  if (typeof import.meta !== 'undefined' && import.meta.env) {
    return import.meta.env[`VITE_${name}`] || defaultValue;
  }
  
  // Return default if nothing found
  return defaultValue;
};

/**
 * Sends an email with optional attachments
 * @param to Recipient email address
 * @param subject Email subject
 * @param body Email body content (HTML supported)
 * @param attachments Optional array of file paths to attach
 */
export const sendEmail = async (
  to: string,
  subject: string,
  body: string,
  attachments: EmailAttachment[] = []
): Promise<boolean> => {
  try {
    // Create a transporter using environment variables
    const transporter = nodemailer.createTransport({
      host: getEnvVar('EMAIL_HOST'),
      port: parseInt(getEnvVar('EMAIL_PORT', '587')),
      secure: getEnvVar('EMAIL_SECURE') === 'true',
      auth: {
        user: getEnvVar('EMAIL_USER'),
        pass: getEnvVar('EMAIL_PASSWORD')
      }
    });

    // Send the email
    const info = await transporter.sendMail({
      from: getEnvVar('EMAIL_FROM', 'noreply@parealestatesupport.com'),
      to,
      subject,
      html: body,
      attachments
    });

    console.log('Email sent successfully:', info.messageId);
    return true;
  } catch (error) {
    console.error('Error sending email:', error);
    return false;
  }
};

/**
 * Sends a cover sheet PDF as an email attachment
 * @param pdfPath Path to the generated PDF file
 * @param transactionData Data about the transaction for the email subject/body
 */
export const sendCoverSheetEmail = async (
  pdfPath: string,
  transactionData: {
    address: string;
    mlsNumber: string;
    agentRole: string;
    agentName: string;
  }
): Promise<boolean> => {
  try {
    // Verify the file exists
    await fs.access(pdfPath);
    
    // Get the filename from the path
    const filename = path.basename(pdfPath);
    
    // Create meaningful subject and body
    const subject = `Cover Sheet - ${transactionData.address} (MLS #${transactionData.mlsNumber})`;
    const body = `
      <h2>Transaction Cover Sheet</h2>
      <p><strong>Property:</strong> ${transactionData.address}</p>
      <p><strong>MLS #:</strong> ${transactionData.mlsNumber}</p>
      <p><strong>Agent Role:</strong> ${transactionData.agentRole}</p>
      <p><strong>Agent Name:</strong> ${transactionData.agentName}</p>
      <p>The transaction cover sheet is attached to this email.</p>
      <p>This email was automatically generated by the PA Real Estate Support Services system.</p>
    `;
    
    // Send the email
    return await sendEmail(
      'debbie@parealestatesupport.com',
      subject,
      body,
      [
        {
          filename,
          path: pdfPath,
          contentType: 'application/pdf'
        }
      ]
    );
  } catch (error) {
    console.error('Error sending cover sheet email:', error);
    return false;
  }
}; 