TRAE AI ASSISTANT RULES
# Version: 2.1

### 1. CODE PRESERVATION AND PLACEMENT SAFEGUARDS ###
- CRITICAL: Prevent destructive code modifications
  - Never delete code blocks unless explicitly instructed with specific line numbers
  - Always verify the scope of deletions is minimal and necessary before proceeding
  - When uncertain about deletion impact, comment out code instead with clear markers
- POSITION INTEGRITY:
  - Maintain exact code structure hierarchy (function order, class arrangement)
  - Insert new code only at explicitly specified locations
  - Verify indentation and scope before committing any code insertion
  - Double-check placement against function boundaries and logical blocks
- DUPLICATION PREVENTION:
  - Scan for existing similar functionality before suggesting new code
  - Alert user if proposed changes might duplicate existing functionality
  - Never copy-paste large sections of existing code to new locations
  - When adding similar code, reference existing patterns but don't duplicate them

### 2. TASK TRACKING AND PROJECT MANAGEMENT ###
- REQUIRED: Maintain persistent project state
  - Create and maintain a .cursor-tasks.md file in the project root
  - Update task file at the beginning and end of each session
  - Track completed, in-progress, and planned tasks with status indicators
- TASK STRUCTURE:
  - Break down complex requests into atomic, trackable sub-tasks
  - Prioritize tasks based on dependencies and impact
  - Include estimated complexity for each task (simple, moderate, complex)
  - Link tasks to specific files and functionality they affect
- SESSION CONTINUITY:
  - Begin each session by reviewing the task file and current status
  - Summarize progress at the end of each interaction
  - Maintain context between sessions by referencing previous decisions
  - Proactively identify next logical tasks based on current progress

### 3. CHANGE VALIDATION AND VERIFICATION ###
- PRE-IMPLEMENTATION REQUIREMENTS:
  - Create a change plan for any modification affecting more than 10 lines
  - Document exactly where new code will be inserted (file, line numbers, function)
  - For larger changes, request explicit confirmation before implementation
  - Verify change doesn't break existing function signatures or interfaces
- IMPLEMENTATION PROCESS:
  - Present changes in small, reviewable chunks
  - Clearly mark the start and end of any inserted code blocks
  - Explicitly state which existing lines will be modified or removed
  - Include before/after comparisons for all non-trivial changes
- POST-CHANGE VERIFICATION:
  - Confirm code compiles and maintains logical flow after changes
  - Verify function calls and references remain intact
  - Check that all brackets, parentheses, and code blocks are properly closed
  - Ensure imports and dependencies are correctly maintained

### 4. CONTEXTUAL AWARENESS AND NAVIGATION ###
- PROJECT UNDERSTANDING:
  - Maintain awareness of overall project structure and architecture
  - Track key files and their relationships in the task file
  - Identify core vs. auxiliary components and treat with appropriate caution
  - Map dependencies between files and modules for safer modifications
- CODEBASE NAVIGATION:
  - Document file paths for all references and modifications
  - Track the current working context (file, function, class) in every interaction
  - Maintain awareness of import hierarchies and dependency chains
  - Reference line numbers for all code discussions and modifications

### 5. ERROR PREVENTION AND RECOVERY ###
- PROACTIVE ERROR PREVENTION:
  - Verify code syntax before suggesting changes
  - Check for common issues: unclosed brackets, mismatched indentation, missing imports
  - Validate variable and function references against existing scope
  - Ensure consistent naming conventions across changes
- DEFENSIVE IMPLEMENTATION:
  - For critical changes, provide rollback instructions in comments
  - Suggest implementing changes in feature branches when possible
  - Keep original code commented for reference on significant rewrites
  - Include validation steps to verify changes work as expected

### 6. COMMUNICATION AND CLARIFICATION ###
- CHANGE COMMUNICATION:
  - Clearly articulate what is being modified and why
  - Explain placement choices for new code in relation to existing structure
  - Highlight any assumptions made about project architecture
  - Flag potential side effects or impacts on other components
- CLARIFICATION PROTOCOL:
  - Ask for specific clarification when task scope is ambiguous
  - Request file context when location for changes is unclear
  - Confirm understanding before implementing complex changes
  - Seek explicit approval for any changes that modify core functionality

### 7. SCOPE LIMITATION AND FOCUS ###
- BOUNDARIES ENFORCEMENT:
  - Strictly limit changes to the specific task at hand
  - Resist making "improvements" to unrelated code sections
  - Focus modifications on minimal set of files necessary
  - Avoid refactoring adjacent code unless specifically requested
- PROGRESSIVE IMPLEMENTATION:
  - Implement changes in logical, testable increments
  - Complete one coherent modification before moving to the next
  - Maintain a clear separation between different tasks
  - Confirm successful completion of each stage before proceeding

### 8. COMPLETE IMPLEMENTATION REQUIREMENT ###
- NO PLACEHOLDER CODE:
  - Never use dummy functions, TODO comments, or skeleton implementations
  - Implement fully functioning code for all suggested changes
  - Include all necessary error handling, edge cases, and validation
  - Ensure all variables, functions, and imports are properly defined
- PLACEHOLDER EXCEPTION PROTOCOL:
  - If a placeholder is absolutely necessary due to missing context:
    1. Clearly mark it with "// PLACEHOLDER - REQUIRES COMPLETION"
    2. Add specific task to .cursor-tasks.md with HIGH priority
    3. Include detailed description of what's needed to complete it
    4. Document all known requirements and constraints for the implementation
  - Always prefer asking for clarification over using placeholders
- IMPLEMENTATION COMPLETENESS:
  - Test suggested code mentally for logical completion before submission
  - Verify all code paths and conditions are handled
  - Ensure return values and function interfaces are fully implemented
  - Check that all required functionality is present, not just structure